version: '3.8'
services:
  inventory_db:
    image: postgres:latest
    container_name: inventory_db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "password"
      POSTGRES_DB: "onlineshop_inventory"
    volumes:
        - ./inventory-db/init.sql:/docker-entrypoint-initdb.d/1-init.sql
        - ./inventory-db/data.sql:/docker-entrypoint-initdb.d/2-data.sql
    networks:
      backend:
        aliases:
          - "inventory_db"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  delivery_db:
    image: postgres:latest
    container_name: delivery_db
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "password"
      POSTGRES_DB: "onlineshop_delivery"
    volumes:
      - ./delivery-db/init.sql:/docker-entrypoint-initdb.d/1-init.sql
      - ./delivery-db/data.sql:/docker-entrypoint-initdb.d/2-data.sql
    networks:
      backend:
        aliases:
          - "delivery_db"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
  configserver:
    image: shoponline/configserver:0.0.1-SNAPSHOT
    container_name: configServer
    ports:
       - "8071:8071"
    networks:
      backend:
        aliases:
          - "configserver"
  eurekaserver:
    image: shoponline/eurekaserver:0.0.1-SNAPSHOT
    container_name: eurekaServer
    ports:
      - "8070:8070"
    depends_on:
      inventory_db:
        condition: service_healthy
      delivery_db:
        condition: service_healthy
      configserver:
        condition: service_started
    networks:
      backend:
        aliases:
          - "eurekaserver"
  inventoryservice:
    image: shoponline/inventoryservice:0.0.1-SNAPSHOT
    container_name: inventory-service
    depends_on:
      inventory_db:
        condition: service_healthy
      configserver:
        condition: service_started
      rabbitmq:
        condition: service_started
    ports:
      - "8080:8080"
    networks:
      - backend
    labels:
      - collect_logs_with_filebeat=true
      - decode_log_event_to_json_object=true
  deliveryservice:
    image: shoponline/delivery:0.0.1-SNAPSHOT
    container_name: delivery-service
    depends_on:
      delivery_db:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      telegramservice:
        condition: service_started
    ports:
      - "8090:8090"
    networks:
      - backend
    labels:
      - collect_logs_with_filebeat=true
      - decode_log_event_to_json_object=true
  telegramservice:
    image: shoponline/telegram:0.0.1-SNAPSHOT
    container_name: telegram-service
    depends_on:
      rabbitmq:
        condition: service_started
    ports:
      - "8110:8110"
    networks:
      - backend
    labels:
      - collect_logs_with_filebeat=true
      - decode_log_event_to_json_object=true
  elasticservice:
    image: shoponline/elastic:0.0.1-SNAPSHOT
    container_name: elastic-service
    environment:
      ELASTIC_HOST: "elasticsearch"
      RABBITMQ_HOST: "rabbitmq"
    depends_on:
      rabbitmq:
        condition: service_started
      elasticsearch:
        condition: service_started
    ports:
      - "8100:8100"
    restart: always
    labels:
      - collect_logs_with_filebeat=true
      - decode_log_event_to_json_object=true
    networks:
      - backend
  rabbitmq:
    image: rabbitmq:3.9.29-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      backend:
        aliases:
          - "rabbitmq"
  elasticsearch:
    image: elasticsearch:7.14.0
    container_name: elasticsearch
    environment:
      - xpack.security.enabled=false
      - node.name=elasticsearch
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./esdata1:/usr/share/elasticsearch/data
    ports:
      - 9300:9300
      - 9200:9200
    networks:
      backend:
        aliases:
          - "elasticsearch"
  logstash:
    image: logstash:7.14.0
    container_name: logstash
    ports:
      - "5044:5044"
      - "5045:5045"
      - "9600:9600"
    volumes:
      - ./config/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./logs/user-activity:/usr/share/logstash/logs/user-activity
    command: logstash -f /usr/share/logstash/pipeline/logstash.conf
    environment:
      - XPACK_MONITORING_ENABLED=false
    networks:
      backend:
        aliases:
          - "logstash"
  kibana:
    image: kibana:7.14.0
    container_name: kibana
    environment:
      ELASTICSEARCH_URL: "http://elasticsearch:9300"
    ports:
      - 5601:5601
    networks:
      backend:
        aliases:
          - "kibana"
    depends_on:
      - logstash
  filebeat:
    image: elastic/filebeat:7.14.0
    container_name: filebeat
    command: filebeat -e -strict.perms=false
    volumes:
      - ./config/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - /var/lib/docker/containers:/var/lib/docker/containers
      - /var/run/docker.sock:/var/run/docker.sock
      - ./config/filebeat/data:/usr/share/filebeat/data
      - ./config/input.log:/etc/filebeat/input.log
    user: root
    depends_on:
      - logstash
    networks:
      backend:
        aliases:
          - "filebeat"
networks:
  backend:
    driver: bridge

#  gatewayserver:
#    image: shoponline/gatewayserver:0.0.1-SNAPSHOT
#    container_name: gateway
#    ports:
#      - "8072:8072"
#    environment:
#      PROFILE: "default"
#      SERVER_PORT: "8072"
#      CONFIGSERVER_URI: "http://configserver:8071"
#      EUREKASERVER_URI: "http://eurekaserver:8070/eureka/"
#      EUREKASERVER_PORT: "8070"
#      CONFIGSERVER_PORT: "8071"
#    depends_on:
#      database:
#        condition: service_healthy
#      configserver:
#        condition: service_started
#      eurekaserver:
#        condition: service_started
#    networks:
#      backend:
#        aliases:
#          - "gateway"